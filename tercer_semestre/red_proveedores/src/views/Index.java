/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
*/
package views;

//Importación de librerías

import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.util.Random;
import clases.Contacto;
import java.io.BufferedReader;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;


/**
 *
 * @author Joao Conde - Victor Suquilanda - Mateo Puga - Josue Riera
 */
public class Index extends javax.swing.JFrame {
    ArrayList Agenda = new ArrayList();
        
    /**
     * Creates new form Index
    */
    
    public Index() {
        initComponents();
        CrearTabla();
        cargarContactos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background = new javax.swing.JPanel();
        Tittle = new javax.swing.JLabel();
        RightSize = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaContactos = new javax.swing.JTable();
        btnMostrar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtNombre = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JLabel();
        txtEmail = new javax.swing.JLabel();
        txtCiudad = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        areaName = new javax.swing.JTextField();
        areaTelefono = new javax.swing.JTextField();
        areaEmail = new javax.swing.JTextField();
        areaCiudad = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Background.setBackground(new java.awt.Color(157, 158, 160));
        Background.setToolTipText("");

        Tittle.setFont(new java.awt.Font("Segoe UI", 1, 40)); // NOI18N
        Tittle.setForeground(new java.awt.Color(255, 255, 255));
        Tittle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Tittle.setText("Red de Proveedores");

        RightSize.setBackground(new java.awt.Color(248, 226, 91));

        tablaContactos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaContactos);

        btnMostrar.setBackground(new java.awt.Color(121, 173, 220));
        btnMostrar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnMostrar.setForeground(new java.awt.Color(255, 255, 255));
        btnMostrar.setText("Mostrar");
        btnMostrar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        btnEditar.setBackground(new java.awt.Color(121, 173, 220));
        btnEditar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setText("Editar");
        btnEditar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(121, 173, 220));
        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RightSizeLayout = new javax.swing.GroupLayout(RightSize);
        RightSize.setLayout(RightSizeLayout);
        RightSizeLayout.setHorizontalGroup(
            RightSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RightSizeLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(RightSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(RightSizeLayout.createSequentialGroup()
                        .addComponent(btnMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        RightSizeLayout.setVerticalGroup(
            RightSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RightSizeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(RightSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        txtNombre.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(255, 255, 255));
        txtNombre.setText("Nombre:");

        txtTelefono.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtTelefono.setForeground(new java.awt.Color(255, 255, 255));
        txtTelefono.setText("Teléfono:");

        txtEmail.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtEmail.setForeground(new java.awt.Color(255, 255, 255));
        txtEmail.setText("Email:");

        txtCiudad.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtCiudad.setForeground(new java.awt.Color(255, 255, 255));
        txtCiudad.setText("Ciudad:");

        btnGuardar.setBackground(new java.awt.Color(121, 173, 220));
        btnGuardar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setText("Guardar");
        btnGuardar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        areaName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaNameActionPerformed(evt);
            }
        });

        areaTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaTelefonoActionPerformed(evt);
            }
        });

        areaEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaEmailActionPerformed(evt);
            }
        });

        areaCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaCiudadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackgroundLayout = new javax.swing.GroupLayout(Background);
        Background.setLayout(BackgroundLayout);
        BackgroundLayout.setHorizontalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Tittle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BackgroundLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtTelefono, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtCiudad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(27, 27, 27)
                                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(areaTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(areaName, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(areaEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(areaCiudad, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(BackgroundLayout.createSequentialGroup()
                                .addGap(140, 140, 140)
                                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 40, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RightSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        BackgroundLayout.setVerticalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addComponent(Tittle, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(areaName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(areaTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(areaEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(areaCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addComponent(RightSize, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Método para cargar contactos desde el archivo
    private void cargarContactos() {
        
        try (BufferedReader reader = new BufferedReader(new FileReader("agenda.txt"))) {
            String line;
            
            while ((line = reader.readLine()) != null) {
                
                // Se divide la línea en partes para obtener los datos del contacto
                String[] parts = line.split(", ");
                // Encontrar la posición del carácter ":"
                int idIndex = parts[0].indexOf(":") + 2;
                int id = Integer.parseInt(parts[0].substring(idIndex));
                String nombre = parts[1].substring(8);
                String telefono = parts[2].substring(10);
                String email = parts[3].substring(7);
                String ciudad = parts[4].substring(8);

                // Crear un objeto Contacto y agregarlo a la lista Agenda
                Contacto contacto = new Contacto(id, nombre, telefono, email, ciudad);
                Agenda.add(contacto);
            }
        } catch (IOException e) {
            
        }
    }

    
    // Método para guardar los contactos en el archivo
    private void guardarContactos() {
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("agenda.txt"))) {
            // Iterar sobre la lista Agenda y escribir cada contacto en una línea del archivo
            for (int i = 0; i < Agenda.size(); i++) {
                
                Contacto contacto = (Contacto) Agenda.get(i);
                writer.write(contacto.toString());
                writer.newLine();
            }
            
        } catch (IOException e) {
            
        }
    }
    
    // Método para mostrar cambios en un contacto y actualizar la interfaz (usado en VisitaEditar.java)
    public void mostrarCambiosEnContacto(Contacto contactoModificado) {
        // Encuentra el contacto en la lista y actualiza sus datos
        for (int i = 0; i < Agenda.size(); i++) {
            Contacto contacto = (Contacto) Agenda.get(i);

            if (contacto.getCodigo() == contactoModificado.getCodigo()) {
                // Actualizar los datos del contacto en la lista
                contacto.setNombre(contactoModificado.getNombre());
                contacto.setTelefono(contactoModificado.getTelefono());
                contacto.setEmail(contactoModificado.getEmail());
                contacto.setCiudad(contactoModificado.getCiudad());
                break;  // Romper el bucle una vez que se actualiza el contacto
            }
        }

        // Actualiza la tabla en la interfaz usando el funcionamiento del botón mostrar
        btnMostrarActionPerformed(null);
        guardarContactos();
    }
    
    
    // Función del botón guardar
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        
        // Se obtienen los nombres de los campos de texto  
        String nombre = areaName.getText();
        String telefono = areaTelefono.getText();
        String email = areaEmail.getText();
        String ciudad = areaCiudad.getText();
        
        // Se asigna un ID de forma al azar de 6 dígitos
        Random random = new Random();
        int id = 100000 + random.nextInt(900000);
        
        // Se hacen las validaciones para comprobar que los campos de texto estén vacíos
        if (!nombre.isEmpty()) {
            if (!telefono.isEmpty()) {
                if (!email.isEmpty()) {
                    if (!ciudad.isEmpty()) {
                        
                        // Se añade el contacto al ArrayList
                        Contacto contacto = new Contacto(id, nombre, telefono, email, ciudad);
                        Agenda.add(contacto);
                        JOptionPane.showMessageDialog(null, "El contacto ha sido agendado éxitosamente");
                        
                        // Se reinician los campos de texto para que estén vacíos
                        areaName.setText("");
                        areaTelefono.setText("");
                        areaEmail.setText("");
                        areaCiudad.setText("");     
                        
                    } else {
                        JOptionPane.showMessageDialog(null, "El campo de ciudad se encuentra vacío");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El campo de email se encuentra vacío");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El campo de telefono se encuentra vacío");
            }
        } else {
            JOptionPane.showMessageDialog(null, "El campo de nombre se encuentra vacío");
        }
        
        // Se guardan los contactos en un archivo
        guardarContactos();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void areaCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaCiudadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_areaCiudadActionPerformed

    private void areaNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_areaNameActionPerformed

    private void areaTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_areaTelefonoActionPerformed

    private void areaEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_areaEmailActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
    
        // Obtener la fila seleccionada en la tabla de contactos
        int filaSeleccionada = tablaContactos.getSelectedRow();

        // Verificar si se ha seleccionado una fila
        if (filaSeleccionada != -1) {
            // Obtener el ID del contacto a eliminar desde la tabla
            int idEliminar = (int) tablaContactos.getValueAt(filaSeleccionada, 0);

            // Eliminar el contacto del ArrayList
            for (int i = 0; i < Agenda.size(); i++) {
                Contacto contacto = (Contacto) Agenda.get(i);
                if (contacto.getCodigo() == idEliminar) {
                    Agenda.remove(i);
                    break;
                }
            }

            // Eliminar el contacto del archivo y actualizar la tabla
            guardarContactos();
            btnMostrarActionPerformed(evt);

            JOptionPane.showMessageDialog(null, "El contacto ha sido eliminado exitosamente");
            
        } else {
            JOptionPane.showMessageDialog(null, "Selecciona un contacto para eliminar");
        } 
    }//GEN-LAST:event_btnEliminarActionPerformed
    
    DefaultTableModel modelo;
    
    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed
        
        // Limpiar el modelo de la tabla para evitar duplicados al mostrar la agenda
        modelo.setRowCount(0);
        Object object[] = null;

        // Mostrar los contactos en la tabla
        for (int i = 0; i < Agenda.size(); i++) {
            
            Contacto contacto = (Contacto) Agenda.get(i);

            // Agregar una nueva fila al modelo de la tabla
            modelo.addRow(object);

            modelo.setValueAt(contacto.getCodigo(), i, 0);
            modelo.setValueAt(contacto.getNombre(), i, 1);
            modelo.setValueAt(contacto.getTelefono(), i, 2);
            modelo.setValueAt(contacto.getEmail(), i, 3);
            modelo.setValueAt(contacto.getCiudad(), i, 4);
        }
    }//GEN-LAST:event_btnMostrarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        
        // Obtener la fila seleccionada en la tabla de contactos
        int filaSeleccionada = tablaContactos.getSelectedRow();

        // Verificar si se ha seleccionado una fila
        if (filaSeleccionada < 0) {
            JOptionPane.showMessageDialog(null, "Selecciona un contacto para editar");
        } else {
            
            // Obtener la información del contacto seleccionado en la tabla
            int codigo = (int) tablaContactos.getValueAt(filaSeleccionada, 0);
            String nombre = (String) tablaContactos.getValueAt(filaSeleccionada, 1);
            String telefono = (String) tablaContactos.getValueAt(filaSeleccionada, 2);
            String email = (String) tablaContactos.getValueAt(filaSeleccionada, 3);
            String ciudad = (String) tablaContactos.getValueAt(filaSeleccionada, 4);

            // Crear un nuevo objeto con la nueva información
            Contacto contactos = new Contacto(codigo, nombre, telefono, email, ciudad);

            // Crear una instancia de la clase VistaEditar y establecer referencias
            VistaEditar editar = new VistaEditar(contactos, this);
            editar.setIndexReference(this);
            editar.setVisible(true);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    /**
     * @param args the command line arguments
     */

    // Método para crear la tabla de contactos
    private void CrearTabla() {
        try {
            // Crear un nuevo modelo (sin datos iniciales, pero con nombres de columnas)
            modelo = new DefaultTableModel(null, new String[] {"Id", "Nombre", "Teléfono", "Email", "Ciudad"}) {};

            // Configurar la tabla de contactos con el modelo recién creado
            tablaContactos.setModel(modelo);
        
            // Crear un renderizador para centrar la información en la tabla
            DefaultTableCellRenderer centrarTabla = new DefaultTableCellRenderer();
            centrarTabla.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

            for (int i = 0; i < tablaContactos.getColumnCount(); i++) {
                // Centrar los datos en la columna
                tablaContactos.getColumnModel().getColumn(i).setCellRenderer(centrarTabla);

                // Ajustar el tamaño de cada columna
                if (i == 0) {
                    tablaContactos.getColumnModel().getColumn(i).setPreferredWidth(60); // Id
                } else if (i == 1) {
                    tablaContactos.getColumnModel().getColumn(i).setPreferredWidth(140); // Nombre
                } else if (i == 2) {
                    tablaContactos.getColumnModel().getColumn(i).setPreferredWidth(90); // Teléfono
                } else if (i == 3) {
                    tablaContactos.getColumnModel().getColumn(i).setPreferredWidth(210); // Email
                } else if (i == 4) {
                    tablaContactos.getColumnModel().getColumn(i).setPreferredWidth(110); // Ciudad
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error");
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Index().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JPanel RightSize;
    private javax.swing.JLabel Tittle;
    private javax.swing.JTextField areaCiudad;
    private javax.swing.JTextField areaEmail;
    private javax.swing.JTextField areaName;
    private javax.swing.JTextField areaTelefono;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaContactos;
    private javax.swing.JLabel txtCiudad;
    private javax.swing.JLabel txtEmail;
    private javax.swing.JLabel txtNombre;
    private javax.swing.JLabel txtTelefono;
    // End of variables declaration//GEN-END:variables
}
